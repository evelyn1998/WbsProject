//C++ Assignment
//Section A
//Question 3: The C++ <random> Library
//Test function


#include <random>
#include <iostream>
#include <vector>
#include <map>
#include "Stopwatch.cpp"



int main()
{
	std::random_device rd;  //uniformly distributed integer random number generator, which produces non-deterministic random numbers
	std::mt19937 gen(rd());  //mersenne_twisted_engine producing 32-bit quality unsigned integer random numbers 


	//-------------------------------------------------------------------------------
	//THE FOLLOWING LINES OF CODE ARE USED FOR THE CONSTRUCTION OF PARTS (c) AND (d)
	//-------------------------------------------------------------------------------

	std::uniform_int_distribution <> dis(1, 6); //producing random integer numbers uniformly distributed on the closed interval [1,6]
	std::vector<int> vec; //creating a vector to store the random numbers that will be generated
	int x; //create the variable x
	std::map<int, int> myMap; //creating a map to store the random numbers that will be generated and the number of times each occurs 

	//---------------------------------------------------------------------
	//THE FOLLOWING LINES OF CODE ARE USED FOR THE CONSTRUCTION OF PART (e)
	//---------------------------------------------------------------------

	std::normal_distribution <double> d{ 0,1 };  //producing random numbers following the standard normal distribution (mean 0, standard deviation 1)
	std::vector<double> nvec; //creating a vector to store the random numbers that will be generated
	double y; //create the variable y
	double rounded; //this is to round the numbers to 2 decimal places (e.g. 1.23)
	std::map<double, double> mynMap; //creating a map to store the random numbers that will be generated and the number of times each occurs


	for (int n = 100; n <= 400; n += 100) // Runs for n = 100, 200, 300, 400 number of iterations

	{
		std::cout << std::endl << "Running for n = " << n << std::endl;

		for (int i = 0; i < n; ++i)  // Generates n random numbers, where n = 100, 200, 300, 400
		{
			//------------------------------------------------------------------------------------
			//THE FOLLOWING LINES OF CODE ARE USED FOR THE CONSTRUCTION OF PARTS (b), (c) AND (d)
			//------------------------------------------------------------------------------------

			x = dis(gen);    //use "dis" to transform the random unsigned integer generated by "gen" into an integer in the interval [1,6] and store that generated random number
			vec.push_back(x);   //adding x to the vector
			std::cout << x << ' '; //print the stored random number
			//std::cout <<  dis(gen) << ' '; 


			//---------------------------------------------------------------------
			//THE FOLLOWING LINES OF CODE ARE USED FOR THE CONSTRUCTION OF PART (e)
			//---------------------------------------------------------------------

			y = d(gen); //use "d" to transform the random unsigned numbers generated by "gen" into a number following the standard normal distribution
			rounded = std::floor((y * 10) + .5) / 100; //rounding the random number 
			//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			//REASON OF ROUNDING: the PRNG would generate random numbers normally distributed in the interval (0,1). Because of that it would be very unlikely to get the exact same number when having many decimal points.
			//By rounding these numbers to two decimal places, it would increase the probability of having a number occur more than once.
			//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			nvec.push_back(rounded); //adding y to the vector
			//std::cout << rounded << ' '; //print the stored random number 

		}

		//------------------------------------------------------------------------------------------------------------
		//THE FOLLOWING LINES OF CODE ARE USED FOR THE CONSTRUCTION OF PART (c)-PRINT NUMBER OF OCCURANCES OF NUMBER 4 
		//------------------------------------------------------------------------------------------------------------
		std::cout << std::endl;
		std::cout << std::endl << "QUESTION 3 PART C: " << std::endl;
		std::cout << "Number of occurances of the value 4 is: " << std::count(vec.begin(), vec.end(), 4) << std::endl;
		

		//--------------------------------------------------------------------------------------------------------------------
		//THE FOLLOWING LINES OF CODE ARE USED FOR THE CONSTRUCTION OF PART (d) - PRINT THE NUMBER OF OCCURANCES OF {1,...,6}
		//--------------------------------------------------------------------------------------------------------------------

		std::cout << std::endl << "QUESTION 3 PART D: " << std::endl;
		for (int k = 1; k <= 6; ++k) //Runs for the given key integrals {1,2,3,4,5,6}
		{

			myMap.insert(std::pair<int, int>(k, std::count(vec.begin(), vec.end(), k)));  //create a map with keys {1,2,3,4,5,6} and value the number of times each of the keys occur
			std::cout <<  "Number of occurances of the value " << k << " in the uniform distribution is: " << myMap.at(k);
			std::cout << std::endl;
		}
			vec.clear(); //clear the vector after use
			myMap.clear(); //Clear the maps after use to avoid multiple use of the same key
		

		//-----------------------------------------------------------------------------------------------------------------------------
		//THE FOLLOWING LINES OF CODE ARE USED FOR THE CONSTRUCTION OF PART (e) - PRINT THE NUMBER OF OCCURANCES OF THE RANDOM NUMBERS
		//-----------------------------------------------------------------------------------------------------------------------------

		std::cout << std::endl << "QUESTION 3 PART E: " << std::endl;
		for (int m = 0; m < nvec.size(); ++m)
		{
			mynMap.insert(std::pair<double, double>(nvec[m], std::count(nvec.begin(), nvec.end(), nvec[m])));   //create a map with keys -0.3, -0.2, ...and value the number of times each of the keys occur
		}

		// Loop through the map and print the first and second element
	   // First = key, second = value
		for (auto it = mynMap.begin(); it != mynMap.end(); it++)
		{
			std::cout << it->first << "\t" << "Number of occurances: " << it->second << std::endl;
		}
		mynMap.clear(); 


	
	}

		vec.clear(); // Clear the vectors after use
		nvec.clear();
		myMap.clear(); //Clear the maps after use to avoid multiple use of the same key
		mynMap.clear();


	//-----------------------------------------------------------------------------------------------------------------------------------------------
	//THE FOLLOWING LINES OF CODE ARE USED FOR THE CONSTRUCTION OF PART (e) - COMPARING ACCURACY AND RUN-TIME PERFORMANCE OF mt19937 AND mt19937_64
	//-----------------------------------------------------------------------------------------------------------------------------------------------

	std::cout << std::endl << "QUESTION 3 PART E: " << std::endl;

	//Initialise first stopwatch
	Stopwatch<> sw1;
	sw1.Start();

	//Run for mt19937
	std::random_device rde;
	std::mt19937 gen1(rde());


	std::normal_distribution <double> distr{ 0,1 };  //producing random numbers following the standard normal distribution (mean 0, standard deviation 1)
	std::vector<double> normvec1; //creating a vector to store the random numbers that will be generated;
	double z; //create the variable z


	for (int j = 0; j < 60000000; ++j)
	{

		z = distr(gen1); //use "distr" to transform the random unsigned numbers generated by "gen1" into a number following the standard normal distribution
		normvec1.push_back(z); //adding z to the vector
	
	}

	sw1.Stop();
	std::cout << "Elapsed time in seconds using mt_19937: " << sw1.GetTime() << std::endl;
	
	//------------------------------------------------------------------------------------------------------------------------------------

	//Initialise second stopwatch
	Stopwatch<> sw2;
	sw2.Start();

	//Run for mt19937_64
	std::random_device rdev;
	std::mt19937_64 gen2(rdev());

	std::normal_distribution <double> distrib{ 0,1 };  //producing random numbers following the standard normal distribution (mean 0, standard deviation 1)
	std::vector<double> normvec2; //creating a vector to store the random numbers that will be generated;
	double w; //create the variable w


	for (int j = 0; j < 60000000; ++j)
	{

		w = distrib(gen2); //use "distrib" to transform the random unsigned numbers generated by "gen2" into a number following the standard normal distribution
		normvec2.push_back(w); //adding w to the vector
	
	}

	sw2.Stop();
	std::cout << "Elapsed time in seconds using mt19937_64: " << sw2.GetTime() << std::endl;

}
	





